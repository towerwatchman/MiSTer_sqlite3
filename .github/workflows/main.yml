name: Build SQLite3 for MiSTer FPGA

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-20.04  # Matches MiSTerâ€™s glibc 2.31

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          sudo apt-get install -y build-essential git wget unzip \
                                  python3.9 python3.9-dev \
                                  zlib1g-dev libncurses5-dev
          # Install Linaro GCC 10.2
          wget https://developer.arm.com/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf.tar.xz
          tar -xf gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf.tar.xz
          sudo mv gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf /opt/gcc-10.2-arm
          rm gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf.tar.xz

      - name: Download SQLite3 Source
        run: |
          wget https://www.sqlite.org/2023/sqlite-autoconf-3430000.tar.gz
          tar -xzf sqlite-autoconf-3430000.tar.gz
          mv sqlite-autoconf-3430000 sqlite3-source

      - name: Set Up ARM Cross-Compiler
        run: |
          export PATH=/opt/gcc-10.2-arm/bin:$PATH
          export CC=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc
          export CXX=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-g++
          export LD=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-ld
          export AR=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-ar
          export RANLIB=/opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-ranlib
          export CFLAGS="-march=armv7-a -mfloat-abi=hard -mfpu=vfpv3-d16 -fPIC"
          export LDFLAGS="-L/usr/arm-none-linux-gnueabihf/lib -Wl,--no-as-needed"
          # Verify toolchain and readelf
          $CC --version
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-readelf --version

      - name: Compile SQLite3 for ARM
        working-directory: sqlite3-source
        run: |
          ./configure --host=arm-none-linux-gnueabihf --prefix=/usr/arm-none-linux-gnueabihf
          make -j$(nproc)
          make install DESTDIR=$PWD/install

      - name: Build SQLite3 Python Module
        run: |
          export CFLAGS="$CFLAGS -I$PWD/sqlite3-source/install/usr/arm-none-linux-gnueabihf/include"
          export LDFLAGS="$LDFLAGS -L$PWD/sqlite3-source/install/usr/arm-none-linux-gnueabihf/lib"
          wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz
          tar -xJf Python-3.9.0.tar.xz
          cd Python-3.9.0
          ./configure --host=arm-none-linux-gnueabihf --build=x86_64-linux-gnu \
                      --prefix=/usr/arm-none-linux-gnueabihf \
                      --enable-shared \
                      --disable-ipv6 \
                      --with-ensurepip=no \
                      ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no
          cd Modules/_sqlite
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c connection.c -o connection.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c cursor.c -o cursor.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c microprotocols.c -o microprotocols.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c module.c -o module.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c prepare_protocol.c -o prepare_protocol.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c row.c -o row.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c statement.c -o statement.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c util.c -o util.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -c cache.c -o cache.o $CFLAGS -I../../Include -I../.. -DMODULE_NAME=\"sqlite3\"
          /opt/gcc-10.2-arm/bin/arm-none-linux-gnueabihf-gcc -shared -o _sqlite3.so *.o $LDFLAGS $PWD/../sqlite3-source/install/usr/arm-none-linux-gnueabihf/lib/libsqlite3.a -lpthread

      - name: Package Artifacts
        run: |
          mkdir -p artifacts
          cp Python-3.9.0/Modules/_sqlite/_sqlite3.so artifacts/
          tar -czf sqlite3-mister.tar.gz -C artifacts .

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-mister
          path: sqlite3-mister.tar.gz

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          VERSION="v$(date +%Y.%m.%d).${{ github.run_number }}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$VERSION" -m "Release $VERSION compiled on $(date -u)"
          git push origin "$VERSION"
          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --notes "SQLite3 module for MiSTer FPGA compiled on $(date -u)" \
            sqlite3-mister.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
